openapi: 3.0.3
info:
  title: Ted Charles Photography API
  description: |
    Backend API for Ted Charles Photography website providing:
    - Album and photo management
    - User authentication via Google OAuth
    - Site branding and configuration
    - Analytics event tracking
    - Public content serving (albums, photos, external links)
    
    ## Authentication
    Most endpoints are public. Admin endpoints require authentication via Google OAuth.
    The API uses session-based authentication with secure HTTP-only cookies.
    
    ## Security
    - CSRF protection on all mutating endpoints (POST/PUT/DELETE)
    - HMAC signature validation on analytics events
    - Path traversal protection on all file operations
    - Rate limiting on all endpoints
    
  version: 1.0.0
  contact:
    name: Ted Charles
    email: me@tedcharles.net
    url: https://tedcharles.net
  license:
    name: Creative Commons Attribution 4.0 International
    url: https://creativecommons.org/licenses/by/4.0/

servers:
  - url: https://api.tedcharles.net
    description: Production server
  - url: http://localhost:3001
    description: Local development server

tags:
  - name: Albums
    description: Public album and photo retrieval
  - name: Album Management
    description: Authenticated album and photo management (create, upload, delete)
  - name: Authentication
    description: Google OAuth authentication and session management
  - name: Branding
    description: Site branding and appearance configuration
  - name: External Links
    description: Navigation menu external link management
  - name: Analytics
    description: Analytics event tracking with HMAC validation
  - name: Health
    description: Service health checks
  - name: Utilities
    description: Utility endpoints (year, sitemap)

paths:
  /api/health:
    get:
      tags: [Health]
      summary: Health check
      description: Simple endpoint to verify the API server is running
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  message:
                    type: string
                    example: Server is running

  /api/current-year:
    get:
      tags: [Utilities]
      summary: Get current year
      description: Returns the current year from server clock (prevents client-side time manipulation)
      responses:
        '200':
          description: Current year
          content:
            application/json:
              schema:
                type: object
                properties:
                  year:
                    type: integer
                    example: 2024

  /sitemap.xml:
    get:
      tags: [Utilities]
      summary: Generate XML sitemap
      description: Dynamically generates XML sitemap for search engines including all albums
      responses:
        '200':
          description: XML sitemap
          content:
            application/xml:
              schema:
                type: string
              example: |
                <?xml version="1.0" encoding="UTF-8"?>
                <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
                  <url>
                    <loc>https://tedcharles.net/</loc>
                    <lastmod>2024-01-01</lastmod>
                    <changefreq>weekly</changefreq>
                    <priority>1.0</priority>
                  </url>
                </urlset>

  /api/albums:
    get:
      tags: [Albums]
      summary: List all albums
      description: Returns array of album names from the photos directory
      responses:
        '200':
          description: List of album names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["nature", "animals", "japan", "people"]

    post:
      tags: [Album Management]
      summary: Create new album
      description: Creates a new album directory (requires authentication)
      security:
        - sessionAuth: []
        - csrfToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  pattern: '^[a-zA-Z0-9_-]+$'
                  description: Album name (alphanumeric, hyphens, underscores only)
                  example: vacation-2024
      responses:
        '200':
          description: Album created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  album:
                    type: string
                    example: vacation-2024
        '400':
          description: Invalid album name or album already exists
        '401':
          description: Not authenticated
        '403':
          description: Invalid CSRF token

  /api/albums/{album}/photos:
    get:
      tags: [Albums]
      summary: Get photos in album
      description: Returns all photos in the specified album with metadata
      parameters:
        - name: album
          in: path
          required: true
          schema:
            type: string
          description: Album name
          example: nature
      responses:
        '200':
          description: Array of photos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Photo'
        '400':
          description: Invalid album name

  /api/albums/{album}:
    delete:
      tags: [Album Management]
      summary: Delete album
      description: Deletes an album and all its photos from both photos and optimized directories
      security:
        - sessionAuth: []
        - csrfToken: []
      parameters:
        - name: album
          in: path
          required: true
          schema:
            type: string
          description: Album name to delete
      responses:
        '200':
          description: Album deleted successfully
        '400':
          description: Invalid album name
        '401':
          description: Not authenticated
        '403':
          description: Invalid CSRF token
        '404':
          description: Album not found

  /api/albums/{album}/photos/{photo}:
    delete:
      tags: [Album Management]
      summary: Delete photo
      description: Deletes a specific photo from an album
      security:
        - sessionAuth: []
        - csrfToken: []
      parameters:
        - name: album
          in: path
          required: true
          schema:
            type: string
        - name: photo
          in: path
          required: true
          schema:
            type: string
          description: Photo filename (e.g., IMG_1234.jpg)
      responses:
        '200':
          description: Photo deleted successfully
        '400':
          description: Invalid album or photo name
        '401':
          description: Not authenticated
        '403':
          description: Invalid CSRF token
        '404':
          description: Photo not found

  /api/albums/{album}/upload:
    post:
      tags: [Album Management]
      summary: Upload photos to album
      description: Upload one or more photos to an album (max 20 files, 50MB each). Triggers automatic image optimization.
      security:
        - sessionAuth: []
        - csrfToken: []
      parameters:
        - name: album
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photos:
                  type: array
                  items:
                    type: string
                    format: binary
                  maxItems: 20
                  description: Image files (JPEG, PNG, GIF)
      responses:
        '200':
          description: Photos uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  files:
                    type: array
                    items:
                      type: string
                  message:
                    type: string
        '400':
          description: Invalid request or file type
        '401':
          description: Not authenticated
        '403':
          description: Invalid CSRF token
        '404':
          description: Album not found

  /api/albums/{album}/optimize:
    post:
      tags: [Album Management]
      summary: Trigger photo optimization
      description: Manually trigger image optimization for an album
      security:
        - sessionAuth: []
        - csrfToken: []
      parameters:
        - name: album
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Optimization started
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Invalid album name
        '401':
          description: Not authenticated
        '403':
          description: Invalid CSRF token

  /api/random-photos:
    get:
      tags: [Albums]
      summary: Get all photos in random order
      description: Returns all photos from all albums (except homepage) in shuffled order
      responses:
        '200':
          description: Array of all photos in random order
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Photo'

  /api/auth/google:
    get:
      tags: [Authentication]
      summary: Initiate Google OAuth login
      description: Redirects to Google OAuth consent screen
      responses:
        '302':
          description: Redirect to Google OAuth

  /api/auth/google/callback:
    get:
      tags: [Authentication]
      summary: Google OAuth callback
      description: Handles the OAuth callback from Google
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
          description: OAuth authorization code
      responses:
        '302':
          description: Redirect to admin portal on success, or error page on failure

  /api/auth/status:
    get:
      tags: [Authentication]
      summary: Check authentication status
      description: Returns current authentication status and user info
      responses:
        '200':
          description: Authentication status
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      authenticated:
                        type: boolean
                        example: true
                      user:
                        $ref: '#/components/schemas/User'
                  - type: object
                    properties:
                      authenticated:
                        type: boolean
                        example: false

  /api/auth/logout:
    post:
      tags: [Authentication]
      summary: Logout
      description: Destroys the user session and logs out
      security:
        - sessionAuth: []
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '401':
          description: Not authenticated
        '500':
          description: Logout or session destruction failed

  /api/branding:
    get:
      tags: [Branding]
      summary: Get branding configuration
      description: Returns site branding settings including colors, site name, meta tags, and HMAC secret for analytics
      responses:
        '200':
          description: Branding configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branding'
        '500':
          description: Failed to read configuration

    put:
      tags: [Branding]
      summary: Update branding configuration
      description: Updates site branding settings (requires authentication)
      security:
        - sessionAuth: []
        - csrfToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandingUpdate'
      responses:
        '200':
          description: Branding updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  branding:
                    $ref: '#/components/schemas/Branding'
        '400':
          description: Invalid request or validation error
        '401':
          description: Not authenticated
        '403':
          description: Invalid CSRF token
        '500':
          description: Failed to update configuration

  /api/branding/upload-avatar:
    post:
      tags: [Branding]
      summary: Upload site avatar/logo
      description: Upload a new avatar image (also used as favicon)
      security:
        - sessionAuth: []
        - csrfToken: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: Image file (JPEG, PNG, GIF, max 5MB)
      responses:
        '200':
          description: Avatar uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  avatarPath:
                    type: string
                  faviconPath:
                    type: string
        '400':
          description: No file uploaded or invalid file type
        '401':
          description: Not authenticated
        '403':
          description: Invalid CSRF token
        '500':
          description: Upload failed

  /api/external-links:
    get:
      tags: [External Links]
      summary: Get external links
      description: Returns configured external links for navigation menu
      responses:
        '200':
          description: External links configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/ExternalLink'
        '500':
          description: Failed to load configuration

    put:
      tags: [External Links]
      summary: Update external links
      description: Updates the list of external links (requires authentication)
      security:
        - sessionAuth: []
        - csrfToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                links:
                  type: array
                  maxItems: 50
                  items:
                    $ref: '#/components/schemas/ExternalLink'
      responses:
        '200':
          description: Links updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/ExternalLink'
        '400':
          description: Invalid request or validation error
        '401':
          description: Not authenticated
        '403':
          description: Invalid CSRF token
        '500':
          description: Failed to save configuration

  /api/external-pages:
    get:
      tags: [External Links]
      summary: Get external pages (legacy)
      description: Legacy endpoint that returns external links (same as /api/external-links)
      responses:
        '200':
          description: External links
          content:
            application/json:
              schema:
                type: object
                properties:
                  externalLinks:
                    type: array
                    items:
                      $ref: '#/components/schemas/ExternalLink'

  /api/analytics/track:
    post:
      tags: [Analytics]
      summary: Track analytics event
      description: |
        Records an analytics event. Events must be signed with HMAC-SHA256 using the configured secret.
        The signature is calculated over the JSON request body and sent in the X-Analytics-Signature header.
        
        Events are proxied to OpenObserve with authentication, keeping credentials secure on the backend.
      parameters:
        - name: X-Analytics-Signature
          in: header
          required: true
          schema:
            type: string
          description: HMAC-SHA256 signature of the request body (hex encoded)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AnalyticsEvent'
      responses:
        '200':
          description: Event tracked successfully (or analytics disabled)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Missing HMAC signature
        '403':
          description: Invalid HMAC signature

components:
  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: connect.sid
      description: Session cookie set after Google OAuth authentication
    csrfToken:
      type: apiKey
      in: header
      name: X-CSRF-Token
      description: CSRF token for state-changing operations

  schemas:
    Photo:
      type: object
      properties:
        id:
          type: string
          description: Unique photo identifier (album/filename)
          example: nature/IMG_1234.jpg
        title:
          type: string
          description: Photo title derived from filename
          example: IMG 1234
        album:
          type: string
          example: nature
        src:
          type: string
          description: Path to modal-sized image
          example: /optimized/modal/nature/IMG_1234.jpg
        thumbnail:
          type: string
          description: Path to thumbnail image
          example: /optimized/thumbnail/nature/IMG_1234.jpg
        download:
          type: string
          description: Path to full-size download
          example: /optimized/download/nature/IMG_1234.jpg
        metadata:
          type: object
          properties:
            created:
              type: string
              format: date-time
            modified:
              type: string
              format: date-time
            size:
              type: integer
              description: File size in bytes

    User:
      type: object
      properties:
        id:
          type: string
          description: Google user ID
        email:
          type: string
          format: email
          example: me@tedcharles.net
        name:
          type: string
          example: Ted Charles
        picture:
          type: string
          format: uri
          description: Google profile picture URL

    Branding:
      type: object
      properties:
        siteName:
          type: string
          example: Ted Charles
        avatarPath:
          type: string
          example: /photos/derpatar.png
        primaryColor:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          example: '#4ade80'
        secondaryColor:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          example: '#22c55e'
        metaDescription:
          type: string
          example: Photography portfolio by Ted Charles
        metaKeywords:
          type: string
          example: photography, portfolio, ted charles
        faviconPath:
          type: string
          example: /favicon.ico
        analyticsHmacSecret:
          type: string
          description: HMAC secret for signing analytics events (only returned in GET requests)

    BrandingUpdate:
      type: object
      properties:
        siteName:
          type: string
          maxLength: 500
        avatarPath:
          type: string
          maxLength: 500
        primaryColor:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
        secondaryColor:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
        metaDescription:
          type: string
          maxLength: 500
        metaKeywords:
          type: string
          maxLength: 500
        faviconPath:
          type: string
          maxLength: 500

    ExternalLink:
      type: object
      required:
        - title
        - url
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 100
          example: Youtube
        url:
          type: string
          format: uri
          example: https://www.youtube.com/@ted_charles
          description: HTTP(S) URL or relative path starting with /

    AnalyticsEvent:
      type: object
      required:
        - event_type
        - timestamp
        - page_url
        - page_path
      properties:
        event_type:
          type: string
          enum:
            - pageview
            - photo_click
            - photo_navigation
            - photo_download
            - modal_close
            - album_navigation
            - external_link_click
            - admin_auth
            - admin_tab_change
            - admin_album_management
            - admin_photo_management
            - admin_external_links_update
            - admin_branding_update
            - admin_avatar_upload
            - error
            - search
          example: pageview
        timestamp:
          type: string
          format: date-time
        page_url:
          type: string
          format: uri
        page_path:
          type: string
          example: /album/nature
        referrer:
          type: string
          example: direct
        user_agent:
          type: string
        screen_width:
          type: integer
        screen_height:
          type: integer
        viewport_width:
          type: integer
        viewport_height:
          type: integer
      additionalProperties: true
      description: |
        Additional properties depend on event_type:
        - photo_click: photo_id, album, photo_title
        - photo_navigation: direction, photo_id, album, photo_title, view_duration_ms (time spent on previous photo)
        - photo_download: photo_id, album, photo_title
        - modal_close: photo_id, album, view_duration_ms (total time modal was open)
        - album_navigation: album, navigation_source (header/footer/mobile_menu)
        - external_link_click: link_title, link_url, navigation_source (header/mobile_menu)
        - admin_auth: action (login/logout), user_email
        - admin_tab_change: tab_name
        - admin_album_management: action (create/delete), album_name
        - admin_photo_management: action (upload/delete), album_name, photo_count, photo_id
        - admin_external_links_update: link_count
        - admin_branding_update: updated_fields, field_count
        - error: error_message, error_context
        - search: search_query, result_count

