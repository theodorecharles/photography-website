import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

interface Config {
  frontend: {
    port: number;
    apiUrl: string;
  };
  backend: {
    port: number;
    photosDir: string;
    allowedOrigins: string[];
  };
  security: {
    allowedHosts: string[];
    rateLimitWindowMs: number;
    rateLimitMaxRequests: number;
    redirectFrom?: string[];
    redirectTo?: string;
  };
}

interface ConfigFile {
  development: Config;
  production: Config;
  branding: {
    siteName: string;
    avatarPath: string;
  };
  analytics?: {
    openobserve?: {
      enabled: boolean;
      endpoint: string;
      username?: string;
      password?: string;
    };
    hmacSecret?: string;
  };
}

let config: Config & { analytics?: ConfigFile['analytics'] };
let fullConfigData: ConfigFile;

try {
  // Try to load config.json, fall back to config.example.json
  const configPath = path.join(__dirname, '../../config/config.json');
  const examplePath = path.join(__dirname, '../../config/config.example.json');
  
  const configFile = fs.existsSync(configPath) ? configPath : examplePath;
  fullConfigData = JSON.parse(fs.readFileSync(configFile, 'utf8'));
  
  const env = process.env.NODE_ENV || 'development';
  config = {
    ...fullConfigData[env as 'development' | 'production'],
    analytics: fullConfigData.analytics
  };
  
  console.log(`Loaded ${env} configuration from ${configFile}`);
} catch (error) {
  console.error('Failed to load configuration file:', error);
  // Fallback to defaults
  config = {
    frontend: {
      port: 3000,
      apiUrl: 'http://localhost:3001'
    },
    backend: {
      port: 3001,
      photosDir: 'photos',
      allowedOrigins: ['http://localhost:5173']
    },
    security: {
      allowedHosts: ['localhost:3000', 'localhost:5173'],
      rateLimitWindowMs: 1000,
      rateLimitMaxRequests: 50
    }
  };
}

// Environment variables can override config file settings
export const PORT = process.env.PORT ? parseInt(process.env.PORT) : config.backend.port;
export const PHOTOS_DIR = process.env.PHOTOS_DIR || config.backend.photosDir;
export const OPTIMIZED_DIR = 'optimized'; // Always use optimized/ at project root - generated by optimize_images.sh
export const ALLOWED_ORIGINS = process.env.ALLOWED_ORIGINS 
  ? process.env.ALLOWED_ORIGINS.split(',').map(o => o.trim())
  : config.backend.allowedOrigins;
export const RATE_LIMIT_WINDOW_MS = config.security.rateLimitWindowMs;
export const RATE_LIMIT_MAX_REQUESTS = config.security.rateLimitMaxRequests;

export default config;

